SUBROUTINE MVDBTOOLKIT.WOBJ.PARSEOBJECT(JSTR,INDEXPOS,PARSEOBJECT)
**********************************************************************
*
* Copyright (C) 2017 Zumasys, Inc., All Rights Reserved
*
* Written by: Patrick Payne, Zumasys
* Date: December 2017
* Description: parse json object
*
**********************************************************************
*
INCLUDE MVDBTOOLKIT.WOBJ.INCLUDE
*
IF WOBJ.DEBUG THEN PRINT "PARSEOBJECT - STARTING"
*
PARSEOBJECT=""
CALL MVDBTOOLKIT.WOBJ.SKIPCHAR(JSTR,INDEXPOS)
*
IF JSTR[INDEXPOS,1] <> "{" THEN
    PSERRORS<-1> = "Invalid Object at position ":INDEXPOS:" : ":JSTR[INDEXPOS,1]
    RETURN
END
*
LEN.JSTR = LEN(JSTR)
INDEXPOS+=1
*
*
JSONOBJECT(JSONOBJECT$NODECNTR)+=1
NODEID=JSONOBJECT(JSONOBJECT$NODECNTR); * WE NEED TO STAY AT THIS NODEID POSITION
JSONOBJECT(JSONOBJECT$NODETYPE)<1,NODEID>="O"; *SET AS OBJECT
IF WOBJ.DEBUG THEN
    PRINT "PARSEOBJECT: SETTING NODETYPE NODEID:":NODEID:" = O"
END
*
LOOP
    CALL MVDBTOOLKIT.WOBJ.SKIPCHAR(JSTR,INDEXPOS)
    C=JSTR[INDEXPOS,1]
    BEGIN CASE
        CASE C="}"
            INDEXPOS+=1
            IF WOBJ.DEBUG > 1 THEN PRINT "PARSEOBJECT: EXIT CHAR }"
            EXIT
        CASE C=","
            INDEXPOS+=1
            CALL MVDBTOOLKIT.WOBJ.SKIPCHAR(JSTR,INDEXPOS)
        CASE INDEXPOS > LEN.JSTR
            PSERRORS<-1>="Missing '}': ":JSTR[LEN.JSTR-20,20]
            EXIT
    END CASE
    *
    * ADD KEY/VALUE PAIR
    *
    JSONOBJECT(JSONOBJECT$NODELENGTH)<1,NODEID>+=1
    PARTPOS=JSONOBJECT(JSONOBJECT$NODELENGTH)<1,NODEID>
    IF WOBJ.DEBUG THEN PRINT "PARSEOBJECT: ":NODEID:" PARSEOBJECT CALLING PARSEKEY"
    CALL MVDBTOOLKIT.WOBJ.PARSEKEY(JSTR,INDEXPOS,SKEY)
    JSONOBJECT(JSONOBJECT$NODEPARTS.KEY)<1,NODEID,PARTPOS>=SKEY
    IF WOBJ.DEBUG THEN PRINT "PARSEOBJECT: ":NODEID:" BACK FROM PARSEKEY: ":SKEY[1,10]
    *
    IF WOBJ.DEBUG THEN PRINT "PARSEOBJECT: ":NODEID:" CALLING PARSEVALUE"
    CALL MVDBTOOLKIT.WOBJ.PARSEVALUE(JSTR,INDEXPOS,PARSEVALUE)
    IF WOBJ.DEBUG THEN PRINT "PARSEOBJECT: ":NODEID:" BACK FROM PARSEVALUE N=":NODEID:" P=":PARTPOS:" T=":PARSEVALUE<1>:" F=":PARSEVALUE<2>
    BEGIN CASE
        CASE PARSEVALUE=""
            PSERRORS<-1>="Invalid value syntax for node ":SKEY
            RETURN
        CASE PARSEVALUE<1>="A" OR PARSEVALUE<1>="O"
            * ARRAY
            JSONOBJECT(JSONOBJECT$NODEPARTS.TYPE)<1,NODEID,PARTPOS>=PARSEVALUE<1>
            JSONOBJECT(JSONOBJECT$NODEPARTS.FLINK)<1,NODEID,PARTPOS>=PARSEVALUE<2>
        CASE 1
            JSONOBJECT(JSONOBJECT$NODEPARTS.TYPE)<1,NODEID,PARTPOS>=PARSEVALUE<1>
            V=PARSEVALUE<2>
            IF INDEX(V,LF,1) OR INDEX(V,CR,1) THEN
                V=OCONV(V,"MX0C")
                E="H"
            END ELSE
                E="A"
            END
            JSONOBJECT(JSONOBJECT$NODEPARTS.VALUE)<1,NODEID,PARTPOS>=V
            JSONOBJECT(JSONOBJECT$NODEPARTS.ENCODING)<1,NODEID,PARTPOS>=E
    END CASE
REPEAT
PARSEOBJECT="O"
PARSEOBJECT<2>=NODEID
IF WOBJ.DEBUG THEN PRINT "PARSEOBJECT - END OF ROUTINE"
RETURN
END

